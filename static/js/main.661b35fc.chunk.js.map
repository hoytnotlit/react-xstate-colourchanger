{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","resolveYes","recResult","grammar","affirmation","resolveNo","person","day","time","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","actions","assign","target","ask","nomatch","duration","confirmDay","confirmTime","final","inspect","url","iframe","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.661b35fc.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\nimport { respond } from \"xstate/lib/actions\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction resolveYes(recResult: string): boolean {\n    return recResult === 'yes' || (grammar[recResult] && grammar[recResult].affirmation == \"yes\")\n}\n\nfunction resolveNo(recResult: string): boolean {\n    return recResult === 'no' || (grammar[recResult] && grammar[recResult].affirmation == \"no\")\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, affirmation?: string } } = {\n    // TODO extend grammar\n    \"Anna\": { person: \"Anna Appleseed\" },\n    \"John\": { person: \"John Appleseed\" },\n    \"Patricia\": { person: \"Patricia G\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"eleven\": { time: \"11:00\" },\n    \"of course\": { affirmation: \"yes\" },\n    \"absolutely\": { affirmation: \"yes\" },\n    \"no way\": { affirmation: \"no\" },\n    \"not really\": { affirmation: \"no\" }\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    //add on cancel event\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"duration\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry can you repeat the day please?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        // TODO add missing states!\n        duration: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    // TODO function checkYes\n                    { target: 'confirmDay', cond: (context) => resolveYes(context.recResult) },\n                    { target: 'time', cond: (context) => resolveNo(context.recResult) },\n                    { target: '.prompt' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                }\n            }\n        },\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirmTime\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What time is your meeting?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I did not understand that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        confirmDay: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    { target: 'final', cond: (context) => resolveYes(context.recResult) },\n                    { target: 'welcome', cond: (context) => resolveNo(context.recResult) }]\n                // TODO infinite loop if you want to cancel booking\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                }\n            }\n        },\n        confirmTime: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    { target: 'final', cond: (context) => resolveYes(context.recResult) },\n                    { target: 'welcome', cond: (context) => resolveNo(context.recResult) },\n                    { target: '.nomatch' }\n                ]\n                // TODO infinite loop if you want to cancel booking\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                //TODO can ask be generalized?\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Was that a yes or a no?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        final: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: say(\"Your appointment has been created!\")\n                }\n            }\n        },\n    }\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n// import { dmMachine } from \"./dmColourChanger\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}