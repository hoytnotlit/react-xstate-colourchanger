{"version":3,"sources":["dmAppointment.ts","dmPrompt.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","resolveYes","recResult","grammar","affirmation","resolveNo","person","day","time","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","actions","assign","target","ask","nomatch","duration","confirmDay","confirmTime","final","recognized_intents","id","query","DONE","indexOf","nluData","intent","name","toLowerCase","confidence","invoke","src","event","nluRequest","onDone","data","onError","console","log","confirm","redirect","always","unknown","appointment","dmAppointmentMachine","todoitem","timer","stop","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","origin","location","fetch","Request","proxyurl","method","headers","then","json","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.40e37b5d.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction resolveYes(recResult: string): boolean {\n    return recResult === 'yes' || (grammar[recResult] && grammar[recResult].affirmation == \"yes\")\n}\n\nfunction resolveNo(recResult: string): boolean {\n    return recResult === 'no' || (grammar[recResult] && grammar[recResult].affirmation == \"no\")\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, affirmation?: string } } = {\n    \"Anna\": { person: \"Anna Appleseed\" },\n    \"John\": { person: \"John Appleseed\" },\n    \"Patricia\": { person: \"Patricia G\" },\n    \"Mary\": { person: \"Mary\" },\n    \"Mike\": { person: \"Michael\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"tomorrow\": { day: \"tomorrow\" },\n    \"Monday\": { day: \"Monday\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"eleven\": { time: \"11:00\" },\n    \"at noon\": { time: \"12:00\" },\n    \"at 3\": { time: \"15:00\" },\n    \"of course\": { affirmation: \"yes\" },\n    \"absolutely\": { affirmation: \"yes\" },\n    \"no way\": { affirmation: \"no\" },\n    \"not really\": { affirmation: \"no\" }\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n                },\n                { target: '#main.stop', cond: (context) => context.recResult === 'stop' },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"duration\"\n                },\n                { target: '#main.stop', cond: (context) => context.recResult === 'stop' },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry can you repeat the day please?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        duration: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    { target: 'confirmDay', cond: (context) => resolveYes(context.recResult) },\n                    { target: 'time', cond: (context) => resolveNo(context.recResult) },\n                    { target: '#main.stop', cond: (context) => context.recResult === 'stop' },\n                    { target: '.prompt' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Will it take the whole day?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                }\n            }\n        },\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirmTime\"\n                },\n                { target: '#main.stop', cond: (context) => context.recResult === 'stop' },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What time is your meeting?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I did not understand that\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        confirmDay: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    { target: 'final', cond: (context) => resolveYes(context.recResult) },\n                    { target: 'welcome', cond: (context) => resolveNo(context.recResult) },\n                    { target: '#main.stop', cond: (context) => context.recResult === 'stop' }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                }\n            }\n        },\n        confirmTime: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    { target: 'final', cond: (context) => resolveYes(context.recResult) },\n                    { target: 'welcome', cond: (context) => resolveNo(context.recResult) },\n                    { target: '#main.stop', cond: (context) => context.recResult === 'stop' },\n                    { target: '.nomatch' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Was that a yes or a no?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        final: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"#main.init\" },\n            states: {\n                prompt: {\n                    entry: say(\"Your appointment has been created!\")\n                }\n            }\n        },\n    }\n})\n","import { MachineConfig, send, Action, assign } from \"xstate\";\nimport { dmMachine as dmAppointmentMachine } from \"./dmAppointment\";\nimport { nluRequest } from \"./index\"\n\nconst confidence_threshold = 0.9;\nconst recognized_intents = [\"appointment\", \"timer\", \"todo_item\"];\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    id: \"main\",\n    initial: 'init',\n    on: {\n        RECOGNISED: { target: '.init', cond: (context) => context.recResult == \"stop\" }\n    },\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: { target: 'query' }\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What would you like to do?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: send('LISTEN')\n                }\n            }\n        },\n        query: {\n            on: {\n                DONE: [\n                    { target: 'confirm', cond: (context) => recognized_intents.indexOf(context.nluData.intent.name.toLowerCase()) > -1 && context.nluData.intent.confidence <= confidence_threshold },\n                    { target: 'redirect', cond: (context) => recognized_intents.indexOf(context.nluData.intent.name.toLowerCase()) > -1 && context.nluData.intent.confidence > confidence_threshold },\n                    { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                    { target: 'unknown' }\n                ]\n            },\n            invoke: {\n                id: 'nlu',\n                src: (context, event) => nluRequest(context.recResult),\n                onDone: {\n                    actions: [assign((context, event) => { return { nluData: event.data } }),\n                    send('DONE')]\n                },\n                onError: {\n                    target: 'unknown',\n                    actions: (context, event) => console.log(event.data),\n                }\n            }\n        },\n        confirm: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    { target: \"redirect\", cond: (context) => context.recResult == \"yes\" },\n                    { target: \"welcome\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Did you choose ${context.nluData.intent.name}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: send('LISTEN')\n                }\n            }\n        },\n        redirect: {\n            always: [\n                { target: 'appointment', cond: (context) => context.nluData.intent.name.toLowerCase() == \"appointment\" },\n                { target: 'todoitem', cond: (context) => context.nluData.intent.name.toLowerCase() == \"todo_item\" },\n                { target: 'timer', cond: (context) => context.nluData.intent.name.toLowerCase() == \"timer\" },\n                { target: 'stop', cond: (context) => context.recResult === 'stop' }\n            ],\n        },\n        unknown: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: { target: 'welcome' }\n            },\n            states: {\n                prompt: {\n                    entry: say(\"I did not understand that. I can create and appointment, set a timer or add an item to your to-do list for you.\")\n                }\n            }\n        },\n        appointment: {\n            ...dmAppointmentMachine\n        },\n        todoitem: {\n            initial: \"welcome\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                welcome: {\n                    entry: say(\"Let's create an item for your to-do list\")\n                }\n            }\n        },\n        timer: {\n            initial: \"welcome\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                welcome: {\n                    entry: say(\"Let's set a timer\")\n                }\n            }\n        },\n        stop: {\n            entry: say(\"Ok\"),\n            always: 'init'\n        }\n    }\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmPrompt\";\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n         * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://gussuvmi-rasa-nlu.herokuapp.com/model/parse';\nconst origin = location.origin;\n\nexport const nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: {\n            'Origin': origin //'http://maraev.me'\n        }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}