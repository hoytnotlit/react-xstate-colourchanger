{"version":3,"sources":["srgs.js","chartparser.js","runparser.js","grammars/appointmentGrammar.ts","dmAppointmentVG.ts","index.tsx"],"names":["Grammar","root","this","$root","VOID","OneOf","NULL","GARBAGE","$check","i","checkSequenceExpansion","err","throwRuleError","Ref","ref","RefClass","Tag","tag","TagClass","alternatives","OneOfClass","Repeat","min","max","sequence","RepeatClass","ruleref","content","_string","toString","join","Infinity","message","error","undefined","TypeError","constructor","Array","name","String","checkExpansion","prototype","Number","LOG","str","clone","obj","temp","key","isEmpty","ob","hasOwnProperty","Chart","numberOfWords","passives","actives","add","edge","subchart","cat","isPassive","start","lhs","end","next","resultsForRule","results","finalEdges","push","out","allEdges","allPassiveEdges","concat","allActiveEdges","edges","j","k","statistics","length","nrEdges","nrPassiveEdges","nrActiveEdges","PassiveEdge","ActiveEdge","rest","rules","text","parse","words","grammar","filter","chart","agenda","leftCornerFilter","addToChart","inference","rhs","slice","SRGS","oneof","eval","position","leftCorners","pop","active","passive","processRuleExpansions","xrule","xitems","childNodes","rule","nodeType","textContent","trim","split","nodeName","uri","getAttribute","repeat","r","parseInt","console","log","gram","dom","DOMParser","parseFromString","ActiveXObject","doc","XML","newDocument","loadXML","url","encodeURIComponent","request","XMLHttpRequest","open","send","responseXML","parseXML","getElementsByTagName","xrules","loadGrammar","getGrammarResult","recResult","say","_context","type","value","listen","resolveYes","yesNoGrammar","affirmation","resolveNo","getDefaultRecogEvents","help_msg","cond","context","actions","assign","meeting_obj","meeting","person","day","time","target","getHelpAction","getDefaultMaxSpeechEvents","prompts","getDefaultStates","prompt","reprompt","nomatch","initial","states","entry","on","ENDSPEECH","ask","delay","id","dmMachine","init","CLICK","welcome","RECOGNISED","idle","redirect","always","appointment","hist","history","who","MAXSPEECH","duration","confirmDay","confirmTime","final","stop","help","timer","cancel","inspect","iframe","machine","Machine","dm","asrtts","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","intent","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","origin","location","nluRequest","fetch","Request","proxyurl","method","headers","then","data","json","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.e70a90dd.chunk.js","sourcesContent":["//\n//  srgs.js\n//  Copyright (C) 2009, Peter Ljunglöf. All rights reserved.\n//\n/*\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published \n  by the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  \n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  \n  You should have received a copy of the GNU General Public License\n  and the GNU Lesser General Public License along with this program.  \n  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n//////////////////////////////////////////////////////////////////////\n// encoding SRGS grammars in javascript\n\nexport function Grammar(root) {\n  this.$root = root;\n  \n  this.VOID = [OneOf([])];\n  this.NULL = [];\n  this.GARBAGE = []; \n  \n  this.$check = function() {\n    for (var i in this) {\n      if (i !== \"$root\" && i !== \"$check\") {\n\ttry {\n\t  checkSequenceExpansion(this[i]);\n\t} catch(err) {\n\t  throwRuleError(\"When checking grammar rule '\" + i + \"'\", err);\n\t}\n      }\n    }\n  }\n}\n\nexport function WordSet(str) {\n  var words = str.split(/ +/);\n  var set = {};\n  for (var i in words) {\n    set[words[i]] = true;\n  }\n  return set;\n}\n\n//////////////////////////////////////////////////////////////////////\n// rule expansion constructors\n\n// sequences are ordinary arrays\nexport function Sequence(seq) {\n  return seq;\n}\n\nexport function Ref(ref) {\n  return new RefClass(ref);\n}\n\nexport function Tag(tag) {\n  return new TagClass(tag);\n}\n\nexport function OneOf(alternatives) {\n  return new OneOfClass(alternatives);\n}\n\nexport function Repeat(min, max, sequence) {\n  return new RepeatClass(min, max, sequence);\n}\n\nexport function Optional(sequence) {\n  return new RepeatClass(0, 1, sequence);\n}\n\n//////////////////////////////////////////////////////////////////////\n// rule expansion classes\n\nexport function RefClass(ruleref) {\n  this.content = ruleref;\n  this._string = \"$\" + ruleref;\n  this.toString = function toString() {return this._string}\n}\n    \nexport function TagClass(tag) {\n  this.content = tag;\n  this._string = \"{\" + tag + \"}\";\n  this.toString = function toString() {return this._string}\n}\n\nexport function OneOfClass(alternatives) {\n  this.content = alternatives;\n  this._string = \"(\" + alternatives.join(\"|\") + \")\";\n  this.toString = function toString() {return this._string}\n}\n\nexport function RepeatClass(min, max, sequence) {\n  this.min = min;\n  this.max = max;\n  this.content = sequence;\n  this._string = this.content + \"<\" + this.min + \"-\" + (this.max==Infinity ? \"\" : this.max) + \">\"\n  this.toString = function toString() {return this._string}\n}\n\n//////////////////////////////////////////////////////////////////////\n// checking rule expansions\n\nexport function throwRuleError(message, error) {\n  if (error == undefined) {\n    throw TypeError(message);\n  } else {\n    throw TypeError(message + \"; \" + error.message);\n  }\n}\n\nexport function checkSequenceExpansion(sequence) {\n  try {\n    if (sequence.constructor !== Array) {\n      throwRuleError(\"Expected Array, found \" + sequence.constructor.name);\n    }\n    for (var i in sequence) {\n      if (sequence[i].constructor == Array) {\n\tcheckSequenceExpansion(sequence[i]);\n      } else if (sequence[i].constructor != String) {\n\tsequence[i].checkExpansion();\n      }\n    }\n  } catch(err) {\n    throwRuleError(\"When checking sequence expansion\", err);\n  }\n};\n\nRefClass.prototype.checkExpansion = function checkExpansion() {\n  if (this.content.constructor !== String) {\n    throwRuleError(\"When checking Ref content; Expected String, found \" + this.content.constructor.name);\n  }\n};\n\nTagClass.prototype.checkExpansion = function checkExpansion() {\n  if (this.content.constructor !== String) {\n      throwRuleError(\"When checking Tag content; Expected String, found \" + this.content.constructor.name);\n  }\n};\n\nOneOfClass.prototype.checkExpansion = function checkExpansion() {\n  try {\n    if (this.content.constructor !== Array) {\n      throwRuleError(\"Expected Array, found \" + this.content.constructor.name);\n    }\n    for (var i in this.content) {\n      checkSequenceExpansion(this.content[i]);\n    }\n  } catch(err) {\n    throwRuleError(\"When checking OneOf content\", err);\n  }\n};\n\nRepeatClass.prototype.checkExpansion = function checkExpansion() {\n  try {\n    if (this.min.constructor !== Number || this.max.constructor !== Number) {\n      throwRuleError(\"Expected min/max to be Number, found \" + this.min.constructor.name + \"/\" + this.max.constructor.name);\n    }\n    if (!(0 <= this.min && this.min <= this.max)) {\n      throwRuleError(\"Expected 0 <= min <= max, found \" + this.min + \"/\" + this.max);\n    }\n    checkSequenceExpansion(this.content);\n  } catch(err) {\n    throwRuleError(\"When checking Repeat content\", err);\n  }\n};\n\n","//\n//  chartparser.js\n//  Copyright (C) 2009, Peter Ljunglöf. All rights reserved.\n//\n/*\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published \n  by the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  \n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  \n  You should have received a copy of the GNU General Public License\n  and the GNU Lesser General Public License along with this program.  \n  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* Mods by Torbjörn\n- Removed the toString() method from Object. Why does it still work?\n- Added a text variable (similar to rules). See \n*/\n\n//////////////////////////////////////////////////////////////////////\n// a logging function\n//  - uncomment if you want to debug the parsing process\nfunction LOG(str) {\n  //console.log(\"\" + str);\n}\n\nimport * as SRGS from './srgs'\n\n//////////////////////////////////////////////////////////////////////\n// we need to be able to clone objects between different edges\n// borrowed from http://keithdevens.com/weblog/archive/2007/Jun/07/javascript.clone\nfunction clone(obj){\n  if (obj == null || typeof(obj) != 'object') {\n    return obj;\n  }\n  var temp = new obj.constructor(); \n  for (var key in obj) {\n    temp[key] = clone(obj[key]);\n  }\n  return temp;\n}\n\n\nfunction isEmpty(ob){\n   for (var i in ob) { if(ob.hasOwnProperty(i)) {return false;}}\n  return true;\n}\n\n//////////////////////////////////////////////////////////////////////\n// parse chart\n// conceptually this is a set of edges, but it is optimized\nfunction Chart(numberOfWords) {\n  this.numberOfWords = numberOfWords;\n  this.passives = new Array(numberOfWords);\n  this.actives = new Array(numberOfWords);\n  for (var i = 0; i <= numberOfWords; i++) {\n    this.passives[i] = {};\n    this.actives[i] = {};\n  }\n\n  // Chart.add(edge)\n  // add the edge to the chart, return true if the chart was changed \n  // (i.e. if the chart didn't already contain the edge)\n  this.add = function add(edge) {\n    var subchart, cat;\n    if (edge.isPassive) {\n      subchart = this.passives[edge.start];\n      cat = edge.lhs;\n    } else {\n      subchart = this.actives[edge.end];\n      cat = edge.next.content;\n    }\n    if (!(cat in subchart)) {\n      subchart[cat] = {};\n    }\n    if (edge in subchart[cat]) {\n      return false;\n    } else {\n      subchart[cat][edge] = edge;\n      return true;\n    }\n  }\n\n  // Chart.resultsForRule(lhs, start, end)\n  // return all parse results for the given lhs, start, and end\n  //  - start, end are optional; defaults to 0, numberOfWords\n  this.resultsForRule = function resultsForRule(lhs, start, end) {\n    start = start || 0;\n    end = end || numberOfWords;\n    var results = [];\n    var finalEdges = this.passives[start][lhs];\n    for (var i in finalEdges) {\n      if (finalEdges[i].end == end) {\n\tresults.push(finalEdges[i].out);\n      }\n    }\n    return results;\n  }\n  \n  // Chart.allEdges() / Chart.allPassiveEdges() / Chart.allActiveEdges()\n  // return an array of all (passive/active) edges in the chart\n  this.allEdges = function allEdges() {\n    return this.allPassiveEdges().concat(this.allActiveEdges());\n  }\n  this.allPassiveEdges = function allPassiveEdges() {\n    var edges = [];\n    for (var i in this.passives) \n      for (var j in this.passives[i]) \n\tfor (var k in this.passives[i][j])\n\t  edges.push(this.passives[i][j][k]);\n    return edges;\n  }\n  this.allActiveEdges = function allActiveEdges() {\n    var edges = [];\n    for (var i in this.actives) \n      for (var j in this.actives[i]) \n\tfor (var k in this.actives[i][j])\n\t  edges.push(this.actives[i][j][k]);\n    return edges;\n  }\n\n  // Chart.statistics()\n  // return the number of edges in the chart\n  this.statistics = function statistics() {\n    var passives = this.allPassiveEdges().length;\n    var actives = this.allActiveEdges().length;\n    return {nrEdges: passives+actives, nrPassiveEdges: passives, nrActiveEdges: actives};\n  }\n}\n\n\n//////////////////////////////////////////////////////////////////////\n// parse edges: passive and active\n\nfunction PassiveEdge(start, end, lhs, out) {\n  this.start = start;\n  this.end = end;\n  this.lhs = lhs;\n  this.out = out;\n  this.isPassive = true;\n\n  var str = \"[\" + start + \"-\" + end + \"] $\" + lhs + \" := \" + out;\n  this._string = str;\n  this.toString = function toString() {return this._string;} \n}\n\nfunction ActiveEdge(start, end, lhs, next, rest, out, rules, text) {\n  this.start = start;\n  this.end = end;\n  this.lhs = lhs;\n  this.next = next;\n  this.rest = rest;\n  this.out = out;\n  this.rules = rules;\n  this.text = text;\n  this.isPassive = false;\n\n  var str = \"<\" + start + \"-\" + end + \"> $\" + lhs + \" -> \" + next + \n    \", \" + rest + \" := \" + out + \" <- \" + rules;\n  this._string = str;\n  this.toString = function toString() {return this._string;} \n}\n\n\n//////////////////////////////////////////////////////////////////////\n// the main parsing function: a simple top-down chartparser\n//  - 'words' is an array of strings\n//  - 'grammar' is a hash table of left-hand-sides mapping to arrays of right-hand-sides\n//  - 'root' is the starting category (a string)\n//    if unspecified, use the '$root' property of the grammar\n//  - 'filter' is an optional left-corner filter \n//    (a mapping from categories/rule-refs to words)\n//    if specified, it is used when predicting new edges\n// returns the final chart\nexport function parse(words, grammar, root, filter) {\n  if (!root) {\n    root = grammar.$root;\n  }\n  var chart = new Chart(words.length);\n  var agenda = [];\n\n  var leftCornerFilter;\n  if (filter == undefined) {\n    leftCornerFilter = function() {return true};\n  } else {\n    leftCornerFilter = function leftCornerFilter(ruleref, position) {\n      var leftCorners = filter[ruleref];\n      return leftCorners ? words[position] in leftCorners : true;\n    }\n  }\n  \n  // add an edge to the chart and the agenda, if it does not already exist\n  function addToChart(inference, start, end, lhs, rhs, out, rules, text) {\n    var edge;\n    if (rhs.length > 0) {\n      var next = rhs[0];\n      var rest = rhs.slice(1);\n      switch (next.constructor) {\n\t\n      case Array:\n\t// the next symbol is a sequence\n\taddToChart(inference+\",SEQUENCE\", start, end, lhs, next.concat(rest), out, rules, text);\n\treturn;\n\t\n      case SRGS.RepeatClass:\n\t// the next symbol is a repetition\n\tvar min = next.min;\n\tvar max = next.max;\n\t// skip repeat \n\tif (min <= 0) {\n\t  addToChart(inference+\",SKIP\", start, end, lhs, rest, out, rules, text);\n\t}\n\t// repeat \n\tif (max > 0) {\n\t  var content = next.content;\n\t  var rhs = (max==1 ? [content] : [content, SRGS.Repeat(min ? min-1 : min, max-1, content)]);\n\t  addToChart(inference+\",REPEAT\", start, end, lhs, rhs.concat(rest), out, rules, text);\n\t}\n\treturn;\n\t\n      case SRGS.OneOfClass:\n\t// the next symbol is a disjunction\n\tvar oneof = next.content;\n\tfor (var i in oneof) {\n\t  var rhs = oneof[i].concat(rest);\n\t  addToChart(inference+\",ONEOF\", start, end, lhs, rhs, out, rules, text);\n\t} \n\treturn;\n\t\n      case SRGS.TagClass:\n\t// the next symbol is a semantic action\n\tout = clone(out);\n\trules = clone(rules);\n\teval(next.content);\n\taddToChart(inference+\",TAG\", start, end, lhs, rest, out, rules, text);\n\treturn;\n      }\n\n      edge = new ActiveEdge(start, end, lhs, next, rest, out, rules, text);\n    } else {\n      edge = new PassiveEdge(start, end, lhs, out);\n    }\n    \n    // try to add the edge; if successful, also add it to the agenda\n    if (chart.add(edge)) {\n      LOG(\"+ \" + inference + \": \" + edge);\n      agenda.push(edge);\n    }\n  }\n  \n  // seed the agenda with the starting rule\n  addToChart(\"INIT\", 0, 0, root, grammar[root], {}, {}, {});\n  \n  // main loop\n  while (agenda.length > 0) {\n    var edge = agenda.pop();\n    var start= edge.start;\n    var end  = edge.end;\n    var lhs  = edge.lhs;\n    var next = edge.next;\n    LOG(edge);\n\n    if (edge.isPassive) {\n      // combine\n      var actives = chart.actives[start][lhs];\n      for (var i in actives) {\n\tvar active = actives[i];\n\tvar rules = clone(active.rules);\n\tvar text = active.text;\n\ttext[edge.lhs] = words.slice(start, end).join(\" \");\n\tif (typeof edge.out == 'object' && isEmpty(edge.out)) {\n\t    rules[edge.lhs] = text[edge.lhs];\n\t} else {\n        rules[edge.lhs] = clone(edge.out);\n    }\n\taddToChart(\"COMBINE\", active.start, end, active.lhs, active.rest, active.out, rules, text);\n      }\n\n    } else if (next.constructor == SRGS.RefClass) {\n      var ref = next.content;\n      // combine\n      var passives = chart.passives[end][ref];\n      for (var i in passives) {\n\tvar passive = passives[i];\n\tvar rules = clone(edge.rules);\n\tvar text = edge.text;\n\trules[passive.lhs] = clone(passive.out);\n\ttext[passive.lhs] = passive.text;\n\taddToChart(\"COMBINE\", start, passive.end, lhs, edge.rest, edge.out, rules, text);\n      }\n      // predict\n      if (ref in grammar) {\n\tif (leftCornerFilter(ref, end)) {\n\t  addToChart(\"PREDICT\", end, end, ref, grammar[ref], {}, {}, {});\n\t}\n      }\n\n    } else if (next == words[end]) {\n      // scan\n      addToChart(\"SCAN\", start, end+1, lhs, edge.rest, edge.out, edge.rules, edge.text);\n    }\n  }\n\n  return chart;\n}\n\n\n","//\n//  runparser.js\n//\n/*\n  The author or authors of this code dedicate any and all \n  copyright interest in this code to the public domain.\n*/\n\n\n// helper functions for the parser demo\n\nimport * as SRGS from './srgs'\n\nfunction getElement(id) {\n  return document.getElementById(id);\n}\n\nfunction appendElement(parent, element, text) {\n  var elem = document.createElement(element);\n  if (text)\n    elem.appendChild(document.createTextNode(text));\n  parent.appendChild(elem);\n  return elem\n}\n\nfunction runParser(input) {\n  var resultsDiv = getElement(\"results\");\n  resultsDiv.innerHTML = \"\";\n  var maybeFilter;\n  if (getElement(\"usefilter\") && getElement(\"usefilter\").checked) {\n    maybeFilter = filter;\n    appendElement(resultsDiv, \"EM\", \"Using left-corner filter\");\n  }\n  var startTime = new Date();\n  var parseChart = parse(input, grammar, grammar.$root, maybeFilter);\n  var parseTime = new Date() - startTime;\n  var parseResults = parseChart.resultsForRule(grammar.$root);\n  \n  console.log(parseResults[0]);\n  \n  if (parseResults) {\n    for (var i in parseResults) {\n        resultsDiv.innerHTML += display(parseResults[i],\"\");\n    }\n  } else {\n    appendElement(resultsDiv, \"P\", \"No results found!\");\n  }\n  \n/*\n  if (parseResults) { \n    var resultList = appendElement(resultsDiv, \"OL\");\n    for (var i in parseResults) \n      appendElement(resultList, \"LI\", JSON.stringify(parseResults[i]));\n  } else {\n    appendElement(resultsDiv, \"P\", \"No results found!\");\n  }\n*/\n  var statistics = parseChart.statistics()\n  appendElement(resultsDiv, \"P\", \"Chart size: \" + statistics.nrEdges + \" edges\" +\n\t\t\" (\" + statistics.nrPassiveEdges + \" passive)\");\n  appendElement(resultsDiv, \"P\", \"Parse time: \" + parseTime + \" ms\" + \n\t\t\" (\" + (parseTime / statistics.nrEdges).toFixed(2) + \" ms/edge)\");\n}\n\nfunction runWordParser() {\n  runParser(getElement(\"input\").value.split(/\\s+/));\n}\n\nfunction runCharacterParser() {\n  runParser(getElement(\"input\").value.split(\"\"));\n}\n\nexport function loadGrammar(str) {\n    var dom = parseXML(str);\n    var root = dom.getElementsByTagName(\"grammar\")[0].getAttribute(\"root\");\n    var grammar = new SRGS.Grammar(root);\n    var xrules = dom.getElementsByTagName(\"rule\");\n    for(var r=0; r < xrules.length; r++) {\n        var xrule = xrules[r];\n        var id = xrule.getAttribute(\"id\");\n        grammar[id] = processRuleExpansions(xrule);\n    }\n    return grammar;\n}\n\nfunction processRuleExpansions(xrule) {\n    var xitems = xrule.childNodes;\n    var rule = [];\n    for(var i=0; i < xitems.length; i++) {\n        if (xitems[i].nodeType == 3) {\n            var str = xitems[i].textContent.trim();\n            if (str != \"\") {\n                rule.push(str.split(/ +/));\n            }\n        } else if (xitems[i].nodeType == 1) {\n            if (xitems[i].nodeName == \"token\") {\n                rule.push(SRGS.Tag(xitems[i].textContent));\n            } else if (xitems[i].nodeName == \"ruleref\") {\n                var uri = xitems[i].getAttribute(\"uri\");\n                rule.push(SRGS.Ref(uri.slice(1)));\n            } else if (xitems[i].nodeName == \"tag\") {\n                rule.push(SRGS.Tag(xitems[i].textContent.trim()));\n            } else if (xitems[i].nodeName == \"one-of\") {\n                rule.push(SRGS.OneOf(processRuleExpansions(xitems[i])));\n            } else if (xitems[i].nodeName == \"item\") {\n                var repeat = xitems[i].getAttribute(\"repeat\");\n                if (!repeat) {\n                    rule.push(processRuleExpansions(xitems[i]));\n                } else {\n                    var r = repeat.split(\"-\");\n                    var min = parseInt(r[0]);\n                    var max = parseInt(r[1]);\n                    max = (max) ? max : Infinity;\n                    rule.push(SRGS.Repeat(min, max, processRuleExpansions(xitems[i])));\n                }\n            } else {\n                console.log(xitems[i]);\n            }\n        }\n    }\n\treturn rule;\n}\n\nfunction parseXML(text) {\n    if (typeof DOMParser != \"undefined\") {\n        // Mozilla, Firefox, and related browsers\n        return (new DOMParser()).parseFromString(text, \"application/xml\");\n    }\n    else if (typeof ActiveXObject != \"undefined\") {\n        // Internet Explorer.\n        var doc = XML.newDocument();  // Create an empty document\n        doc.loadXML(text);            // Parse text into it\n        return doc;                   // Return it\n    }\n    else {\n        // As a last resort, try loading the document from a data: URL\n        // This is supposed to work in Safari. Thanks to Manos Batsis and\n        // his Sarissa library (sarissa.sourceforge.net) for this technique.\n        var url = \"data:text/xml;charset=utf-8,\" + encodeURIComponent(text);\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", url, false);\n        request.send(null);\n        return request.responseXML;\n    }\n};\n","export const grammar = `\n<grammar root=\"initial\">\n    <!--e.g. “create meeting with Bob on Friday at noon”, \n        “create meeting with Bob on Friday”, “create meeting with Bob”.-->\n    <rule id=\"initial\">\n        <item repeat=\"0-1\">please</item>\n        <ruleref uri=\"#meeting\" />\n        <tag>out.meeting = rules.meeting;</tag>\n    </rule>\n\n    <rule id=\"meeting\">\n        <item repeat=\"0-1\">create\n            <item repeat=\"0-1\">\n                <one-of>\n                    <item>a</item>\n                    <item>an</item>\n                </one-of>\n            </item>\n            <one-of>\n                <item>meeting</item>\n                <item>appointment</item>\n            </one-of>\n        </item>\n        <!--handle case where time is said before day-->\n        <!--NOTE you could add cases where person is said last in a similar way-->\n        <item>\n            <one-of>\n                <item>\n                    <ruleref uri=\"#person\" />\n                    <ruleref uri=\"#day\" />\n                    <ruleref uri=\"#time\" />\n                </item>\n                <item>\n                    <ruleref uri=\"#person\" />\n                    <ruleref uri=\"#time\" />\n                    <ruleref uri=\"#day\" />\n                </item>\n            </one-of>\n        </item>\n        <tag>out.person=rules.person;out.day=rules.day;out.time=rules.time;</tag>\n    </rule>\n\n    <rule id=\"person\">\n        <item repeat=\"0-1\">\n            <item repeat=\"0-1\">with</item>\n            <one-of>\n                <item>Bob <tag> out = \"Bob the Builder\"; </tag>\n                </item>\n                <item>Anna <tag> out = \"Anna Appleseed\"; </tag>\n                </item>\n                <item>John <tag> out = \"John Appleseed\"; </tag>\n                </item>\n                <item>Patricia <tag> out = \"Patricia G\"; </tag>\n                </item>\n                <item>Mary <tag> out = \"Mary\"; </tag>\n                </item>\n                <item>Mike <tag> out = \"Mike\"; </tag>\n                </item>\n                <item>Bill <tag> out = \"Bill\"; </tag>\n                </item>\n            </one-of>\n        </item>\n    </rule>\n\n    <rule id=\"day\">\n        <item repeat=\"0-1\">\n            <item repeat=\"0-1\">on</item>\n            <one-of>\n                <item>Monday <tag> out = \"monday\"; </tag>\n                </item>\n                <item>Tuesday<tag> out = \"tuesday\"; </tag>\n                </item>\n                <item>Wednesday<tag> out = \"wednesday\"; </tag>\n                </item>\n                <item>Thursday<tag> out = \"thursday\"; </tag>\n                </item>\n                <item>Friday<tag> out = \"friday\"; </tag>\n                </item>\n                <item>Saturday<tag> out = \"saturday\"; </tag>\n                </item>\n                <item>Sunday<tag> out = \"sunday\"; </tag>\n                </item>\n                <item>tomorrow<tag> out = \"tomorrow\"; </tag>\n                </item>\n            </one-of>\n        </item>\n    </rule>\n\n    <rule id=\"time\">\n        <item repeat=\"0-1\">\n            at\n            <one-of>\n                <item>noon <tag> out = 12; </tag>\n                </item>\n                <item>afternoon <tag> out = \"afternoon\"; </tag>\n                </item>\n            </one-of>\n        </item>\n    </rule>\n\n</grammar>\n`","import { MachineConfig, actions, Action, assign, send } from \"xstate\";\nimport { loadGrammar } from './runparser'\nimport { parse } from './chartparser'\nimport { grammar as grmr } from './grammars/appointmentGrammar'\n\nconst gram = loadGrammar(grmr)\n\nfunction getGrammarResult(recResult: string) {\n    let res = parse(recResult.split(/\\s+/), gram);\n    return res.resultsForRule(gram.$root)[0];\n}\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction resolveYes(recResult: string): boolean {\n    return recResult === 'yes' || (yesNoGrammar[recResult] && yesNoGrammar[recResult].affirmation == \"yes\")\n}\n\nfunction resolveNo(recResult: string): boolean {\n    return recResult === 'no' || (yesNoGrammar[recResult] && yesNoGrammar[recResult].affirmation == \"no\")\n}\n\nfunction getDefaultRecogEvents(help_msg: string) {\n    return [\n        {\n            cond: (context: SDSContext) => !!getGrammarResult(context.recResult),\n            actions: assign((context: SDSContext) => {\n                let meeting_obj = getGrammarResult(context.recResult).meeting;\n                // don't overwrite existing results (eg. user says create meeting on friday \n                //-> go to state who -> go to state time)\n                return {\n                    person: context.person ? context.person : meeting_obj.person,\n                    day: context.day ? context.day : meeting_obj.day,\n                    time: context.time ? context.time : meeting_obj.time\n                }\n            }),\n            target: \"#main.redirect\"\n        },\n        { target: '#main.stop', cond: (context: SDSContext) => context.recResult === 'stop' },\n        {\n            cond: (context: SDSContext) => context.recResult === 'help',\n            actions: getHelpAction(help_msg),\n            target: '#main.help'\n        },\n        { target: \".nomatch\" }\n    ]\n}\n\nfunction getDefaultMaxSpeechEvents() {\n    return [\n        {\n            actions: getRepromptAction(),\n            cond: (context: SDSContext) => !context.prompts || context.prompts < 3,\n            target: \".reprompt\"\n        },\n        {\n            actions: getClearRepromptAction(),\n            cond: (context: SDSContext) => context.prompts >= 3,\n            target: \"#main.init\"\n        }\n    ]\n}\n\nfunction getDefaultStates(prompt: Action<SDSContext, SDSEvent>, reprompt: Action<SDSContext, SDSEvent>,\n    nomatch: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: prompt,\n                on: { ENDSPEECH: \"ask\" }\n            },\n            reprompt: {\n                entry: reprompt,\n                on: { ENDSPEECH: \"ask\" }\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', { delay: 5000, id: 'maxsp' })]\n            },\n            nomatch: {\n                entry: say(nomatch),\n                on: { ENDSPEECH: \"reprompt\" }\n            }\n        }\n    })\n}\n\n\n// functions for getting assign-actions, my editor gives an error when the result is \n// directly in the actions: ... part\n\nfunction getHelpAction(help_msg: string): any {\n    return assign((context) => { return { help_msg: help_msg } });\n}\n\nfunction getRepromptAction(): any {\n    return assign((context: SDSContext) => { return { prompts: context.prompts ? context.prompts + 1 : 1 } });\n}\n\nfunction getClearRepromptAction(): any {\n    return assign((context: SDSContext) => { return { prompts: 0 } });\n}\n\nconst yesNoGrammar: { [index: string]: { person?: string, day?: string, time?: string, affirmation?: string } } = {\n    \"of course\": { affirmation: \"yes\" },\n    \"absolutely\": { affirmation: \"yes\" },\n    \"no way\": { affirmation: \"no\" },\n    \"not really\": { affirmation: \"no\" }\n}\n\n// NOTES AND COMMENTS\n\n// I did not find the use of orthogonal states necessary, but I did implemeted them for the sake\n// of the assignment by adding two parallel states where one state asks the user an open ended \n// question and the other state \"listens\" to what the user might say, ready to redirect to\n// the correct state. The solution is slightly incomplete and the start state at the moment\n// has no real functionality implemented. I tried adding another action (timer) but when \n// the user enters that state, they come back to the listen-state so this did not work well.\n// The same thing happens when stopping, the initial state is listen so the program never \"stops\"\n\n// Unexpected inputs in the start.welcome-state are not handled. I tried adding a nomatch-state\n// that would tell the user the actions that can be done but this needs some condition\n// to check if the user is already in another state in the parallel state. I couldn't find a solution\n// for these issues for the moment.\n\n// example utterances that work:\n// meeting with Bob\n// create a meeting with Bob\n// create a meeting with Bob on Friday\n// create a meeting with Bob on Friday at noon\n// create a meeting with Bob at noon\n// create a meeting with Bob at noon on Friday\n// create a meeting on Friday\n// create a meeting at noon\n\n// The same grammar is also used for questions answered in states who, day and time\n// so utterances \"with Bob\", \"on Friday\", \"at noon\" would work too, even though\n// this behavious is a bit illogical (Q: \"what would you like to do\" A: \"with Bob\")\n\n// I have increased the timeouts because 3 seconds was too short to wait for some answers\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    type: 'parallel',\n    states: {\n        start: {\n            id: \"start\",\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: 'welcome'\n                    }\n                },\n                welcome: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            // NOTE in this block we could add other actions (eg timer, to do list from \n                            // lab2) and redirect accordingly\n                            // { cond: (context) => context.recResult == \"set timer\", target: \"#main.timer\" },\n                            { target: \".idle\" }\n                            // { target: \".nomatch\" }\n                        ]\n                    },\n                    states: {\n                        prompt: {\n                            entry: say(\"What would you like to do?\"),\n                            on: { ENDSPEECH: \"ask\" }\n                        },\n                        ask: {\n                            entry: listen()\n                        },\n                        nomatch: {\n                            entry: say(\"Currently I can only book an appointment or set a timer.\"),\n                            on: { ENDSPEECH: \"prompt\" }\n                        },\n                        idle: {\n                            // NOTE here I guess can be implemented a listener for stop/help/etc\n                        },\n                    }\n                },\n            }\n        },\n        actions: {\n            id: \"main\",\n            // initial: \"appointment\",\n            initial: \"init\",\n            states: {\n                init: {\n                    on: {\n                        ENDSPEECH: 'listen'\n                    }\n                },\n                listen: {\n                    on: {\n                        RECOGNISED: {\n                            cond: (context) => !!getGrammarResult(context.recResult),\n                            actions: assign((context) => {\n                                let meeting_obj = getGrammarResult(context.recResult).meeting;\n                                return { person: meeting_obj.person, day: meeting_obj.day, time: meeting_obj.time }\n                            }),\n                            target: \"redirect\"\n                        }\n                    },\n                    entry: listen()\n                },\n                redirect: {\n                    always: [\n                        { target: '#appointment.confirmTime', cond: (context) => !!context.person && !!context.day && !!context.time },\n                        { target: '#appointment.duration', cond: (context) => !!context.person && !!context.day },\n                        { target: '#appointment.day', cond: (context) => !!context.person },\n                        { target: '#appointment.who', cond: (context) => !context.person && (!!context.day || !!context.time) },\n                        { target: '#appointment.welcome' }\n                    ]\n                },\n                appointment: {\n                    id: 'appointment',\n                    initial: 'welcome',\n                    states: {\n                        hist: { type: 'history', history: 'deep' },\n                        welcome: {\n                            initial: \"prompt\",\n                            on: { ENDSPEECH: \"who\" },\n                            states: {\n                                prompt: { entry: say(\"Let's create an appointment\") }\n                            }\n                        },\n                        who: {\n                            on: {\n                                RECOGNISED: [...getDefaultRecogEvents(\"Tell me the name of the person.\")],\n                                MAXSPEECH: [...getDefaultMaxSpeechEvents()]\n                            },\n                            ...getDefaultStates(say(\"Who are you meeting with?\"),\n                                say(\"Can you tell me who you are meeting with?\"),\n                                \"Sorry, I don't know them.\")\n                        },\n                        day: {\n                            on: {\n                                RECOGNISED: [...getDefaultRecogEvents(\"Tell me the day of the meeting.\")],\n                                MAXSPEECH: [...getDefaultMaxSpeechEvents()]\n                            },\n                            ...getDefaultStates(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `OK. ${context.person}. On which day is your meeting?`\n                            })),\n                                say(\"What day do you have your meeting?\"),\n                                \"Can you repeat that?\")\n                        },\n                        duration: {\n                            on: {\n                                RECOGNISED: [\n                                    { target: 'confirmDay', cond: (context) => resolveYes(context.recResult) },\n                                    { target: 'time', cond: (context) => resolveNo(context.recResult) },\n                                    ...getDefaultRecogEvents(\"Tell me yes or no.\"),\n                                ],\n                                MAXSPEECH: [...getDefaultMaxSpeechEvents()]\n                            },\n                            ...getDefaultStates(say(\"Will it take the whole day?\"),\n                                say(\"Is your meeting going to last the entire day?\"),\n                                \"I did not catch that.\")\n                        },\n                        time: {\n                            on: {\n                                RECOGNISED: [...getDefaultRecogEvents(\"Tell me the time of your meeting.\")],\n                                MAXSPEECH: [...getDefaultMaxSpeechEvents()]\n                            },\n                            ...getDefaultStates(say(\"What time is your meeting?\"),\n                                say(\"When does your meeting start?\"),\n                                \"Can you repeat that?\")\n                        },\n                        confirmDay: {\n                            on: {\n                                RECOGNISED: [\n                                    { target: 'final', cond: (context) => resolveYes(context.recResult) },\n                                    { target: 'welcome', cond: (context) => resolveNo(context.recResult) },\n                                    ...getDefaultRecogEvents(\"Tell me yes or no.\")\n                                ],\n                                MAXSPEECH: [...getDefaultMaxSpeechEvents()]\n                            },\n                            ...getDefaultStates(\n                                send((context) => ({\n                                    type: \"SPEAK\",\n                                    value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                                })),\n                                send((context) => ({\n                                    type: \"SPEAK\",\n                                    value: `You are meeting with ${context.person} on ${context.day} for the whole day. Is that correct?`\n                                })),\n                                \"Yes or no?\")\n                        },\n                        confirmTime: {\n                            on: {\n                                RECOGNISED: [\n                                    { target: 'final', cond: (context) => resolveYes(context.recResult) },\n                                    { target: 'welcome', cond: (context) => resolveNo(context.recResult) },\n                                    ...getDefaultRecogEvents(\"Tell me yes or no.\")\n                                ],\n                                MAXSPEECH: [...getDefaultMaxSpeechEvents()]\n                            },\n                            ...getDefaultStates(\n                                send((context) => ({\n                                    type: \"SPEAK\",\n                                    value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                                })),\n                                send((context) => ({\n                                    type: \"SPEAK\",\n                                    value: `You are meeting with ${context.person} on ${context.day} at ${context.time}. Is that correct?`\n                                })),\n                                \"Yes or a no?\")\n                        },\n                        final: {\n                            initial: \"prompt\",\n                            on: { ENDSPEECH: \"#root.dm.start.init\" },\n                            states: {\n                                prompt: {\n                                    entry: say(\"Your appointment has been created!\")\n                                }\n                            }\n                        },\n                    }\n                },\n                stop: {\n                    entry: say(\"Ok\"),\n                    always: 'init'\n                },\n                help: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `${context.help_msg}`\n                    })),\n                    on: { ENDSPEECH: \"appointment.hist\" }\n                },\n                timer: {\n                    entry: say(\"I will set a timer for you.\"),\n                    always: 'init'\n                }\n            }\n        }\n    }\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointmentVG\";\nconst { send, cancel } = actions;\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: {\n                            actions: [cancel('maxsp'), assign((context: SDSContext) => { return { prompts: 0 } })],\n                            target: 'idle'\n                        },\n                        MAXSPEECH: 'idle'\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n         * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://gussuvmi-rasa-nlu.herokuapp.com/model/parse';\nconst origin = location.origin;\n\nexport const nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: {\n            'Origin': origin //'http://maraev.me'\n        }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}